
class Solution {
public:
    int mod=1000000007;
    long long solve(long long a,long long n){
       if(a==0)return 1;
       long long ans=solve(a/2,n);
       ans=(ans*ans)%mod;
       if(a%2)ans=(ans*n)%mod;
       return ans;
    }
    int countGoodNumbers(long long n) {
        if(n==1)return 5;
        long long x=n/2+ n%2;
        long long y=n/2;
        return (solve(x,5)*solve(y,4))%mod;
    }
};

/* Question taught us three things:-
1. In modulo question, try not to store multiplication "long long ans= (solve(x,5)*solve(y,4))%mod;" variable ans is not able to store that much digit.
2. Never store multiplication in int type "ans=(ans*ans)%mod;" if datatype of ans is int then it is not able to store product, an error come unsigned integer overflow.
3. For calculating Pow(x,y)=> y^x   think about tree... if you go for tree approach then time complexity is log(n)
    long long solve(long long a,long long n){ ... Function to calculate y^x;
       if(a==0)return 1;
       long long ans=solve(a/2,n);
       ans=(ans*ans);
       if(a%2)ans=(ans*n);
       return ans;
    } */
